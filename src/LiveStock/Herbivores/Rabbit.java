package LiveStock.Herbivores;

import LiveStock.Animal.AnimalType;
import LiveStock.Plants;
import Main.Island.Cell;
import Main.Island.CellPosition;
import Main.Island.Island;
import Main.Main;
import Main.Settings.Color;
import Main.Settings.Initialize;
import Main.Settings.StatisticData;

import java.util.*;

public class Rabbit extends Herbivores {

    public static Rabbit rabbit = new Rabbit();

    public Rabbit() {
        super.setWeight(2);
        super.setMaxValueOnBoard(150);
        super.setSpeed(2);
        super.setMaxFoodSaturation(0.45);
        super.setFoodSaturation(getMaxFoodSaturation()/2);
    }

    /**
     *  –ê–ª–≥–æ—Ä–∏—Ç–º getIcon():
     *      –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—å–µ–∫—Ç–∞ rabbit
     */

    @Override
    public String getIcon() {
        return Color.WHITE_BOLD_BRIGHT + "üêá" + Color.RESET;
    }

    /**
     *  –ê–ª–≥–æ—Ä–∏—Ç–º eat():
     *      –º–µ—Ç–æ–¥ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–∞–≤–æ—è–¥–Ω–æ–≥–æ –ø–æ –ø–æ–µ–¥–∞–Ω–∏—é —Ä–∞—Å—Ç–µ–Ω–∏–π
     */

    @Override
    public void eat(List<Object> list) { //–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: —Å–ø–∏—Å–æ–∫ —è—á–µ–π–∫–∏ –º–∞—Å—Å–∏–≤–∞ island

        if (list.contains(Plants.plant.getPlantIcon())) { // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç plant

            list.remove(Plants.plant.getPlantIcon()); // –£–¥–∞–ª—è–µ–º plant –∏–∑ —Å–ø–∏—Å–∫–∞ list
            setFoodSaturation(getFoodSaturation() + Plants.plant.weight / 20); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—ã—â–µ–Ω–∏—è foodSaturation
            if (getFoodSaturation() > -0.01)
            System.out.println(getClass().getSimpleName() + " Saturation = " + getFoodSaturation());
            if (getFoodSaturation() > getMaxFoodSaturation()) { // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ foodSaturation –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ
                if (Main.random.nextBoolean()) {
                    multiply(); // –°–æ–∑–¥–∞–µ–º –µ—â–µ –æ–¥–∏–Ω –æ–±—å–µ–∫—Ç rabbit
                    setFoodSaturation(0.2); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ foodSaturation
                }
            }
            StatisticData.plantEatCount++; // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            System.out.println(Color.YELLOW_UNDERLINED + getClass().getSimpleName() + " eat " + StatisticData.plantEatCount + " times" + Color.RESET);
            move(list); // rabbit –¥–≤–∏–≥–∞–µ—Ç—Å—è –¥–∞–ª—å—à–µ

        }
        else { //–ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç plant

            setFoodSaturation(getFoodSaturation() - Plants.plant.weight / 20); // –£–º–µ–Ω—å—à–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—ã—â–µ–Ω–∏—è foodSaturation
            if (getFoodSaturation() > -0.001)
            System.out.println(getClass().getSimpleName() + " not eat");
            if (getFoodSaturation() < 0.01) { // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ foodSaturation –º–µ–Ω—å—à–µ 0.01
                list.remove(getIcon()); // –£–¥–∞–ª—è–µ–º rabbit –∏–∑ —Å–ø–∏—Å–∫–∞ list
                if (getFoodSaturation() > -0.001) {
                    StatisticData.herbivoresDeadCount++; // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    System.out.println(Color.YELLOW_UNDERLINED + getClass().getSimpleName() + " dead" + Color.RESET);
                }
            }
            move(list); // rabbit –¥–≤–∏–≥–∞–µ—Ç—Å—è –¥–∞–ª—å—à–µ
            if (getFoodSaturation() > -0.001)
            System.out.println(getClass().getSimpleName() + " Saturation = " + getFoodSaturation());
        }
    }

    /**
     *  –ê–ª–≥–æ—Ä–∏—Ç–º move():
     *      –º–µ—Ç–æ–¥ –º–µ–Ω—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é rabbit –º–µ–∂–¥—É —Å–ø–∏—Å–∫–∞–º–∏ —è—á–µ–µ–∫ –º–∞—Å—Å–∏–≤–∞ island –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–ª–∏ –Ω–∞ –ø–µ—Ä–≤—É—é —è—á–µ–π–∫—É –º–∞—Å—Å–∏–≤–∞ island
     */

    @Override
    public void move(List<Object> list) { //–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: —Å–ø–∏—Å–æ–∫ —è—á–µ–π–∫–∏ –º–∞—Å—Å–∏–≤–∞ island

        int index = getCurrentPosition(); // –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –º–∞—Å—Å–∏–≤–µ island

        for (int i = 0; i < list.size(); i++) { // –¶–∏–∫–ª –ø–æ —Å–ø–∏—Å–∫—É list

            if (list.get(i).equals(getIcon())) { // –ï—Å–ª–∏ rabbit –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ list
                list.remove(list.get(i)); // –£–¥–∞–ª—è–µ–º rabbit –∏–∑ —Å–ø–∏—Å–∫–∞ list

                if (index == Island.cellMaxSize-1) { // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è —Ä–∞–≤–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —è—á–µ–π–∫–µ –º–∞—Å—Å–∏–≤–∞ island
                    CellPosition.changeCell(getIcon(), 0); // –ú–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –ø–µ—Ä–≤—É—é —è—á–µ–π–∫—É –º–∞—Å—Å–∏–≤–∞ island
                    System.out.println(getClass().getSimpleName() + " move in the begin");
                    this.setCurrentPosition(0); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏

                } else { // –í –ª—é–±–æ–º –¥—Ä—É–≥–æ–º —Å–ª—É—á–∞–µ
                    index = Main.random.nextInt(Island.cellMaxSize); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∏–Ω–¥–µ–∫—Å
                    CellPosition.changeCell(getIcon(), index); // –ú–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —Ä–∞–Ω–¥–æ–º–Ω—É—é —è—á–µ–π–∫—É –º–∞—Å—Å–∏–≤–∞ island
                    System.out.println(getClass().getSimpleName() + " random move" + getCurrentPosition());
                    setCurrentPosition(index); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
                }
            }
        }
    }

    /**
     *  –ê–ª–≥–æ—Ä–∏—Ç–º multiply():
     *      –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–µ—Ç rabbit –≤ —Å–ø–∏—Å–∫–µ –º–∞—Å—Å–∏–≤–∞ island
     */

    @Override
    public void multiply() {
        this.setCurrentPosition(Main.random.nextInt(Island.cellMaxSize)); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        CellPosition.changeCell(Main.factory.createAnimal(AnimalType.RABBIT.ordinal()).getIcon(), getCurrentPosition()); // –°–æ–∑–¥–∞–µ–º rabbit —á–µ—Ä–µ–∑ AnimalFactory
        StatisticData.herbivoresBornCount++; // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        eat(Objects.requireNonNull(CellPosition.getCellList(getCurrentPosition())));
        System.out.println(Color.YELLOW_UNDERLINED + getClass().getSimpleName() + " multiply" + Color.RESET + getCurrentPosition());
    }

    @Override
    public void toDie() {

    }
}
